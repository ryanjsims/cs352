#! /bin/bash


TIME_LIMIT=10     # in seconds


if [[ $(ls -1 test_*.c 2>/dev/null) == "" ]]
then
  echo "No files named test_*.c were found.  The grading script cannot run." 1>&2
  exit 1
fi

if [[ $(ls -1 test_mergeSort_* 2>/dev/null) == "" ]]
then
  echo "No files named test_mergeSort_* were found.  The grading script cannot run." 1>&2
  exit 1
fi



# clean up the old things built by the makefile, if they currently exist.
ls -1 test_*.c | cut -f1 -d'.' | xargs -r rm 2>/dev/null
rm *.o mergeSort 2>/dev/null


# run the Makefile to build everything.  We don't check the return codes, or
# anything.

echo "--------------------------------------------------"
echo "| Running the makefile..."
echo "--------------------------------------------------"
make 2>&1
echo


SCORE_SO_FAR=0

ATTEMPTED=0
PASSED=0

# run the compiled testcases.
for TESTCASE in $(ls -1 test_*.c | cut -f1 -d'.')
do
  echo "--------------------------------------------------"
  echo "| Beginning testcase $TESTCASE..."
  echo "--------------------------------------------------"

  ATTEMPTED=$(( ATTEMPTED+4 ))

  if [[ ! -f $TESTCASE.out ]]
  then
    echo "The file $TESTCASE.out is not present, the testcase cannot be attempted."
    echo
    continue
  fi

  if [[ ! -s $TESTCASE.out ]]
  then
    echo "The file $TESTCASE.out is exists, but is empty.  The testcase cannot be attempted."
    echo
    continue
  fi

  if [[ ! -x $TESTCASE ]]
  then
    echo "The file $TESTCASE either doesn't exist, or is not executable.  This either means that the Makefile did not attempt to build it, or else that the build failed.  This testcase cannot be attempted."
    echo
    continue
  fi

  # run the testcase.  Capture stdout and stderr; the output must be correct,
  # and the stderr empty.  Then we'll do valgrind in a second pass.

  # these are the 3 log files we'll create
  so=logs.$TESTCASE.student.stdout
  se=logs.$TESTCASE.student.stderr
  vg=logs.$TESTCASE.valgrind

  # measure the size of the .out file; we'll only allow that many lines.  And
  # we'll chop every line at no more than 1000 characters.  Oh, and we'll
  # limit stderr to 10 lines, 1000 characters
  LINE_LIMIT=$(wc -l $TESTCASE.out | cut -f1 -d' ')
  LINE_LIMIT=$(( LINE_LIMIT*2 ))


  # because of the cat command below, I don't have access to the RC from the
  # previous command.  So we'll run it a second time, and check the RC on that.
  # It's a hack, but it's the best I've found so far.
  timeout -k $TIME_LIMIT $TIME_LIMIT ./$TESTCASE 1>/dev/null 2>&1
  STUDENT_RC=$?

  # Diagnose student timeouts with a message that makes it clear.  Otherwise
  # I get lots of Piazza posts about it.  :(
  if [[ $STUDENT_RC = 124 ]]
  then
    echo "TESTCASE FAILED: timeout!"
    continue
  fi


  # the 'cat' at the end solves a subtle race condition: without it, the main
  # command can terminate while the process substitutions are still running;
  # this can cause mismatches later.  But if we add a piped 'cat' (even though
  # there will be nothing to print), it causes an implicit wait.  This is
  # because the stdin that 'cat' is reading from is the shared stdout, from
  # all of the processes before; this only hits EOF when the last process
  # dies - thus, it functions as a global 'wait' condition
  timeout -k $TIME_LIMIT $TIME_LIMIT ./$TESTCASE             \
               1> >(head -n $LINE_LIMIT | cut -c-1000 > $so) \
               2> >(head -n 10          | cut -c-1000 > $se) | cat


  # compare stdout
  if [[ $(diff $TESTCASE.out $so) == "" ]]
  then
    echo "stdout compare OK."
    PASSED=$(( PASSED+2 ))
    rm $so
  else
    echo "TESTCASE FAILED: stdout miscompare!"
    echo "--- diff output: ---"
    diff $TESTCASE.out $so
    continue
  fi

  # if we get here, then stdout matched.  Was stderr empty?
  if [[ -s $se ]]
  then
    echo "TESTCASE ERROR: stderr was not empty!"
    # if this happens, we'll still go ahead and run the rest of the test

  elif [[ $STUDENT_RC != 0 ]]
  then
    echo "TESTCASE ERROR: rc=$STUDENT_RC"
    # if this happens, we'll still go ahead and run the rest of the test

  else
    echo "stderr is empty, and rc=0 (good)"
    PASSED=$(( PASSED+1 ))
    rm $se
  fi


  # do the valgrind test.  We do *NOT* use a timeout here, because valgrind
  # make the program a lot slower.  But that's safe, because it didn't
  # time out above, when we tried it the first time.
  valgrind --leak-check=full ./$TESTCASE >/dev/null 2>$vg
  
  # 25% of the testcase score: valgrind
  if [[ $(grep "ERROR SUMMARY" $vg) = "" ]]
  then
    echo "TESTCASE ERROR: The output from valgrind does not appear to include the error summary, no valgrind grade can be assigned." 1>&2

  elif [[ $(grep "ERROR SUMMARY" $vg | grep -v "ERROR SUMMARY: 0") != "" ]]
  then
    echo "TESTCASE ERROR: Valgrind errors occurred." 1>&2

  else
    PASSED=$(( PASSED+1 ))
    rm $vg
  fi

  echo
done

# when we get here, we've run some testcases.  This is 40% of the total grade
# for this project.
TESTS_SCORE=$(( PASSED*40/ATTEMPTED ))
echo "----------------------------"
echo "GENERAL TESTCASES SCORE: $TESTS_SCORE / 40"
echo "----------------------------"
echo 

SCORE_SO_FAR=$(( SCORE_SO_FAR + TESTS_SCORE ))



# now, run all of the mergeSort tests.  We'll compare these against the
# canonical UNIX 'sort' tool, and we have a timeout equal to num-words divided
# by 1000.
ATTEMPTED=0
PASSED=0
for TESTCASE in $(ls -1 test_mergeSort_*)
do
  echo "--------------------------------------------------"
  echo "| Beginning testcase $TESTCASE..."
  echo "--------------------------------------------------"

  ATTEMPTED=$(( ATTEMPTED+4 ))

  WORDS=$(wc -w $TESTCASE | cut -f1 -d' ')
  LINE_LIMIT=$(( WORDS*2 ))
  TIME_LIMIT=$(( WORDS/1000 ))

  so=logs.$TESTCASE.student.stdout
  se=logs.$TESTCASE.student.stderr
  eo=logs.$TESTCASE.example.stdout
  vg=logs.$TESTCASE.valgrind

  # xargs gripes about quotes, so we can't have those
  if [[ $(cat $TESTCASE | grep -E [\"\']) != "" ]]
  then
    echo "ERROR: The testcase includes single or double quotes, which confuses the 'xargs' command, which we're using to help generate the 'example' output.  We cannot run this testcase so long as those characters are in the file."
    echo
    continue
  fi


  timeout -k $TIME_LIMIT $TIME_LIMIT ./mergeSort <$TESTCASE  \
               1> >(head -n $LINE_LIMIT | cut -c-1000 > $so) \
               2> >(head -n 10          | cut -c-1000 > $se) | cat

  timeout -k $TIME_LIMIT $TIME_LIMIT ./mergeSort <$TESTCASE 1>/dev/null 2>/dev/null
  STUDENT_RC=$?

  cat $TESTCASE | xargs -n1 | sort >$eo 2>/dev/null


  # compare stdout
  if [[ $(diff $eo $so) == "" ]]
  then
    echo "stdout compare OK."
    PASSED=$(( PASSED+2 ))
    rm $eo $so
  else
    echo "TESTCASE FAILED: stdout miscompare!"
    echo "--- diff output: ---"
    diff $eo $so
    echo
    continue
  fi

  # if we get here, then stdout matched.  Was stderr empty?
  if [[ -s $se ]]
  then
    echo "TESTCASE ERROR: stderr was not empty!"
    # if this happens, we'll still go ahead and run the rest of the test

  elif [[ $STUDENT_RC != 0 ]]
  then
    echo "TESTCASE ERROR: rc=$STUDENT_RC"
    # if this happens, we'll still go ahead and run the rest of the test

  else
    echo "stderr is empty, and rc=0 (good)"
    PASSED=$(( PASSED+1 ))
    rm $se
  fi


  # do the valgrind test.  We do *NOT* use a timeout here, because valgrind
  # make the program a lot slower.  But that's safe, because it didn't
  # time out above, when we tried it the first time.
  valgrind --leak-check=full ./mergeSort <$TESTCASE >/dev/null 2>$vg
  
  # 25% of the testcase score: valgrind
  if [[ $(grep "ERROR SUMMARY" $vg) = "" ]]
  then
    echo "TESTCASE ERROR: The output from valgrind does not appear to include the error summary, no valgrind grade can be assigned." 1>&2

  elif [[ $(grep "ERROR SUMMARY" $vg | grep -v "ERROR SUMMARY: 0") != "" ]]
  then
    echo "TESTCASE ERROR: Valgrind errors occurred." 1>&2

  else
    PASSED=$(( PASSED+1 ))
    rm $vg
  fi
done

# the mergeSort testcases are worth 20 points
MERGE_SCORE=$(( PASSED*20/ATTEMPTED ))
echo "----------------------------"
echo "MERGE SORT TESTCASES SCORE: $MERGE_SCORE / 20"
echo "----------------------------"
echo 

SCORE_SO_FAR=$(( SCORE_SO_FAR + MERGE_SCORE ))

echo "----------------------------"
echo "AUTOMATED SCORE: $SCORE_SO_FAR / 60"
echo "----------------------------"

