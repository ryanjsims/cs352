#! /bin/bash



ALL_PROGS="rollingStrings"
TIME_LIMIT=10     # in seconds


# confirm that all of the basic test elements are present.
for PROG in $ALL_PROGS
do
  if [[ ! -f example_$PROG ]]
  then
    echo "ERROR: example_$PROG is missing from the current directory." 1>&2
    exit 1
  fi

  if [[ $(ls -1 test_${PROG}_* 2>/dev/null) = "" ]]
  then
    echo "WARNING: Could not find any testcases for $PROG.  That program will receive a score of 0 from this script." 1>&2
  fi

  if [[ ! -f $PROG.c ]]
  then
    echo "WARNING: $PROG.c is missing; that program will receive a score of 0 from this script." 1>&2
  fi
done



SCORE_SO_FAR=0



# NOW A BIG LOOP
#
# Each iteration of this loop tests one of the required programs; it goes
# through all of the testcases for that program, and runs each one in turn.

for PROG in $ALL_PROGS
do
  echo "------------- BEGIN TESTING OF ${PROG}.c -------------"

  # STEP 1: Confirm that the program compiles (without errors)

  # clean up the old artifacts.  Confirm that they were removed.
  rm $PROG compile.out 2>/dev/null

  if [[ -f $PROG || -f compile.out ]]
  then
    echo "ERROR: Could not remove the file '$PROG' or 'compile.out" 1>&2
    exit 1
  fi

  # build the executable; collect the output (if any), and the exit status
      # we'll use this version when we start requiring gcov:
      # gcc -Wall -std=gnu99 -g -fprofile-arcs -ftest-coverage -o ${PROG} ${PROG}.c -lm >compile.out 2>&1
  gcc -Wall -std=gnu99 -g -o ${PROG} ${PROG}.c -lm >compile.out 2>&1
  RC=$?

  # -s asks "does the file exist and has a size greater than zero".
  # See # 'man test'
  if [[ $RC != 0 || -s compile.out ]]
  then
    COMPILE_PENALTY=1
    echo "ERROR: ${PROG}.c did not compile perfectly.  Either warnings or errors were produced, or else the exit status from gcc was nonzero."
  else
    COMPILE_PENALTY=0
    rm compile.out
  fi


  # STEP 2: Confirm that the student Makefile works properly.

  echo "+--------------------------------------------------------+"
  echo "| Beginning Makefile check...                            |"
  echo "+--------------------------------------------------------+"
  MAKEFILE_SCORE=0

  # First test: Since we've just built the executable, running
  #             "make [prog]" now should have no effect.
  echo "+--------------------------------------------------------+"
  echo "| Checking that the Makefile will not rebuild a          |"
  echo "| recently-built file...                                 |"
  echo "+--------------------------------------------------------+"

  if [[ $(make $PROG) != "make: \`$PROG' is up to date." ]]
  then
    echo "ERROR: $PROG: The Makefile not will rebuild recently-built executables.  Fix the dependency/rule relationships.  (This script will attempt to rebuild the executable by hand, so that the testcases can still run.)" 1>&2

    #gcc -Wall -std=gnu99 -g -fprofile-arcs -ftest-coverage -o ${PROG} ${PROG}.c -lm
    gcc -Wall -std=gnu99 -g -o ${PROG} ${PROG}.c -lm >compile.out 2>&1
  else

    # Second test: does the Makefile build the executable if it doesn't
    #              exist?  And if so, does it have the proper arguments?
    echo "+--------------------------------------------------------+"
    echo "| Checking that the Makefile will build an executable if |"
    echo "| the current one is removed...                          |"
    echo "|                                                        |"
    echo "| (This will also check that you pass the proper         |"
    echo "| arguments to gcc.)                                     |"
    echo "+--------------------------------------------------------+"

    # if we remove the executable, then we should force a rebuild operation.
    rm $PROG
    make $PROG > make.out
    MAKE_RC=$?

    if [[ ! -f $PROG || $MAKE_RC != 0 ]]
    then
      echo "ERROR: $PROG: 'make' hit an error while rebuiling the executable." 1>&2

# Later, we'll add a couple more checks to this - when we require gcov
#    elif [[ $(grep     gcc            make.out) = "" ||
#            $(grep -E "\-g"           make.out) = "" ||
#            $(grep -E "profile-arcs"  make.out) = "" ||
#            $(grep -E "test-coverage" make.out) = "" ]]

    elif [[ $(grep     gcc  make.out) = "" ||
            $(grep -E "\-g" make.out) = "" ]]
    then
      echo "ERROR: $PROG: When 'make' was rebuilding the executable, some of the required arguments were missing." 1>&2

    else
      rm make.out

      # third test: If we modify the .c file, will the program get updated?
      touch $PROG.c

      make $PROG >/dev/null

      if [[ $(ls -1tr $PROG.c $PROG | tail -n1) != "$PROG" ]]
      then
        echo "ERROR: $PROG: 'make' did not automatically rebuild the executable when the .c file was modified." 1>&2

      elif [[ ! -f Makefile ]]
      then
        echo "The Makefile works, but it appears that it is not properly named." 1>&2
        MAKEFILE_SCORE=5

      else
        echo "+--------------------------------------------------------+"
        echo "| All Makefile tests passed.                             |"
        echo "+--------------------------------------------------------+"
        MAKEFILE_SCORE=10
      fi
    fi
  fi

  echo "+-----------------"
  echo "| MAKEFILE SCORE FOR $PROG: $MAKEFILE_SCORE / 10"
  echo "+-----------------"


  echo "+-----------------"
  echo "| In case the Makefile did not build the executable properly, the"
  echo "| script will now discard what the Makefile created, and build the"
  echo "| executable by hand (again)."
  echo "+-----------------"
  rm ${PROG} >/dev/null 2>/dev/null
  #gcc -Wall -std=gnu99 -g -fprofile-arcs -ftest-coverage -o ${PROG} ${PROG}.c -lm >/dev/null 2>/dev/null
  gcc -Wall -std=gnu99 -g -o ${PROG} ${PROG}.c -lm >/dev/null 2>/dev/null
  if [[ ! -f ${PROG} ]]
  then
    echo "ERROR: Since ${PROG} did not compile properly, it will receive 0 points." 1>&2
    continue
  fi


  # run the testcases

  echo "+--------------------------------------------------------"
  echo "| Beginning regular testcases for ${PROG}.  This will include:"
  echo "|   - stdout check                                       "
  echo "|   - stderr/rc check                                    "
  echo "|   - valgrind check                                     "
  echo "+--------------------------------------------------------"

  ATTEMPT=0
  PASS=0

  for TESTCASE in $(ls -1 test_${PROG}_*)
  do
    echo "    *** testcase: $TESTCASE"

    # in this script, each attempt is worth 4 points, since we split the
    # points that can be earned into quarters (and bash doesn't handle floats)
    # We set this very *early*, so that we can simply 'continue' out, any
    # place that we find a failure.  It reduces nesting depth.
    ATTEMPT=$(( ATTEMPT+4 ))


    # extract the testcase type from the name extension
    EXTENSION=$(echo $TESTCASE | rev | cut -f1  -d'.' | rev)
    TESTCASE=$( echo $TESTCASE | rev | cut -f2- -d'.' | rev)

    # based on the testcase name, we set the input values.  By doing it this
    # way, we can unify the testcase-running code below.
    if [[ $EXTENSION = "stdin" ]]
    then
      STDIN=$TESTCASE.stdin
      ARGS=""
    elif [[ $EXTENSION = "args" ]]
    then
      STDIN=/dev/null
      ARGS=$(cat $TESTCASE.args)
    else
      echo "ERROR: $PROG: Testcase '$TESTCASE' could not be run, because the grading script didn't recognize the testcase extension.  Please name the testcase \*.stdin or \*.args." 1>&2
      continue
    fi


    # for clarity below, use variables for the 5 filenames.
    eo=$PROG.$TESTCASE.example.stdout
    ee=$PROG.$TESTCASE.example.stderr
    so=$PROG.$TESTCASE.student.stdout
    se=$PROG.$TESTCASE.student.stderr
    vg=$PROG.$TESTCASE.valgrind

    # clean up old artifacts
    rm $eo $ee $so $se 2>/dev/null


    # run the example executable - and then the student executable, to compare
    cat $STDIN | timeout $TIME_LIMIT  ./example_$PROG $ARGS >$eo 2>$ee
    EXAMPLE_RC=$?

    cat $STDIN | timeout $TIME_LIMIT          ./$PROG $ARGS >$so 2>$se
    STUDENT_RC=$?

    # Now check for valgrind errors.
    cat $STDIN | timeout $TIME_LIMIT valgrind --leak-check=full ./$PROG $ARGS >/dev/null 2>$vg


    # Diagnose student timeouts with a message that makes it clear.  Otherwise
    # I get lots of Piazza posts about it.  :(
    if [[ $STUDENT_RC = 124 ]]
    then
      echo "ERROR: $PROG: Testcase '$TESTCASE' failed: Command timed out after $TIME_LIMIT seconds." 1>&2
      continue
    fi


    # 50% of the testcase score: compare stdout
    if [[ $(diff $eo $so) ]]
    then
      echo "ERROR: $PROG: Testcase '$TESTCASE' failed: stdout mismatch." 1>&2
      continue
    fi

    # any code which gets here gets half credit for the testcase.
    PASS=$(( PASS+2 ))
    rm $eo $so


    # 25% of the testcase score: compare stderr (loosely) and return codes
    if [[ $STUDENT_RC != $EXAMPLE_RC ]]
    then
      echo "ERROR: $PROG: Testcase '$TESTCASE' partial failure: exit status mismatch.  example: $EXAMPLE_RC student: $STUDENT_RC" 1>&2
    else
      if [[ -s $ee && ! -s $se ]]
      then
        echo "ERROR: $PROG: Testcase '$TESTCASE' partial failure: the example executable printed something to stderr, but the student testcase did not." 1>&2
      else
        if [[ ! -s $ee &&   -s $se ]]
        then
          echo "ERROR: $PROG: Testcase '$TESTCASE' partial failure: the example executable did *NOT* print anything to stderr, but the student testcase did." 1>&2
        else
          # passed all tests for this 25% of the score.  Note that this has
          # to be buried inside many layers of if() because the errors above
          # should *NOT* terminate testcase processing; we still have to
          # check valgrind.
          PASS=$(( PASS+1 ))
          rm $ee $se
        fi
      fi
    fi


    # 25% of the testcase score: valgrind
    if [[ $(grep "ERROR SUMMARY" $vg) = "" ]]
    then
      echo "ERROR: $PROG: Testcase '$TESTCASE' failed: The output from valgrind does not appear to include the error summary, no valgrind grade can be assigned." 1>&2

    elif [[ $(grep "ERROR SUMMARY" $vg | grep -v "ERROR SUMMARY: 0") != "" ]]
    then
      echo "ERROR: $PROG: Testcase '$TESTCASE' failed: Valgrind errors occurred." 1>&2

    else
      PASS=$(( PASS+1 ))
      rm $vg
    fi

#    echo "PASS/ATTEMPT : $PASS/$ATTEMPT"
  done

  POSSIBLE=60

  if [[ $ATTEMPT -eq 0 ]]
  then
    echo "WARNING: The program '$PROG' did not have any testcases, you earn 0 points for this program." 1>&2
    THIS_SCORE=0
  else
    # total up the score for this program
    THIS_SCORE=$(( POSSIBLE*PASS / ATTEMPT ))

    if [[ $COMPILE_PENALTY = 1 ]]
    then
      THIS_SCORE=$(( THIS_SCORE / 2 ))
    fi
  fi

  echo "+--------------------------------------------------------+"
  echo "| Regular testcase testing has completed.                |"
  echo "+--------------------------------------------------------+"
  echo "SCORE FOR '$PROG': ${THIS_SCORE} out of ${POSSIBLE} points"


  # perform the gcov testing 
#  echo "+--------------------------------------------------------+"
#  echo "| Begin gcov testing.  You may see messages about        |"
#  echo "| certain testcase errors - however, we try to catch as  |"
#  echo "| much of the output as possible, and discard it.        |"
#  echo "+--------------------------------------------------------+"
#  rm $PROG.gcda   # gcov logging file
#  ls -1d test_${PROG}* | while read line
#  do
#    cd $line || continue
#    timeout $TIME_LIMIT ../$PROG $(cat CMDLINE) >/dev/null 2>&1
#    cd ..
#  done
#
#  echo "+--------------------------------------------------------+"
#  echo "| The gcov testcases have finished.  Running gcov to     |"
#  echo "| collect the information...                             |"
#  echo "+--------------------------------------------------------+"
#  gcov $PROG 2>&1
#
#  echo "+--------------------------------------------------------+"
#  echo "| The gcov output is below.  Please inspect it for       |"
#  echo "| uncovered lines, which will be marked with #####       |"
#  echo "+--------------------------------------------------------+"
#  cat  $PROG.c.gcov 2>&1

  echo "------------- END TESTING OF ${PROG}.c -------------"


#  cd ..

  SCORE_SO_FAR=$(( SCORE_SO_FAR + THIS_SCORE ))
done


echo "----------------------------"
echo "     Makefile: $MAKEFILE_SCORE / 10"
echo "     Testcase: $SCORE_SO_FAR / 60"
echo "AUTOMATED SCORE: $(( MAKEFILE_SCORE + SCORE_SO_FAR ))"
echo "----------------------------"


